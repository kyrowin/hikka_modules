# meta developer: @mainkyrowin

from hikkatl.types import Message
from .. import loader, utils
import logging
import requests
import json

logger = logging.getLogger(__name__)

__version__ = (1, 0, 0)

@loader.tds
class AliceSmartHomeMod(loader.Module):
    """–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º —É–º–Ω—ã–º –¥–æ–º–æ–º!"""
    strings = {
        "name": "AliceSmartHome",
        "no_token": "üö´ –¢–æ–∫–µ–Ω API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π <code>.fcfg AliceSmartHome token –≤–∞—à_—Ç–æ–∫–µ–Ω</code>",
        "token_saved": "üîë –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        "devices_loaded": "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        "error": "‚ùå –û—à–∏–±–∫–∞: {}",
        "no_devices": "ü§∑‚Äç‚ôÇÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        "controlling": "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏",
        "install_msg": (
            "üîß <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API —Ç–æ–∫–µ–Ω?</b>\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å API. "
            "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            "<a href='https://habr.com/ru/articles/789200/'>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ Habr</a>\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "<code>.fcfg AliceSmartHome token –≤–∞—à_—Ç–æ–∫–µ–Ω</code>"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "token",
            None,
            lambda: "–¢–æ–∫–µ–Ω API –Ø–Ω–¥–µ–∫—Å (y0_...)",
        )
        self._message_id = None

    async def client_ready(self, client, db):
        self._client = client
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if not self.config["token"]:
            await self._client.send_message(
                self._client.loader.inline.bot_username,
                self.strings("install_msg"),
                parse_mode="HTML"
            )

    async def smarthomecmd(self, message: Message):
        """–í—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏."""
        if not self.config["token"]:
            await utils.answer(message, self.strings("no_token"))
            return

        try:
            devices = await self._get_devices()
            if not devices:
                await utils.answer(message, self.strings("no_devices"))
                return

            self._message_id = message.id
            
            await self.inline.form(
                text=self.strings("controlling"),
                reply_markup=self._generate_markup(devices),
                message=message,
            )
        except Exception as e:
            await utils.answer(message, self.strings("error").format(str(e)))

    async def _get_devices(self):
        headers = {
            "Authorization": f"Bearer {self.config['token']}",
            "X-Request-Id": "telegram-hikka-module",
        }
        
        try:
            response = requests.get(
                "https://api.iot.yandex.net/v1.0/user/info",
                headers=headers,
                timeout=10
            )
            response.raise_for_status()
            data = response.json()
            
            if not isinstance(data, dict):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            
            devices = []
            
            for device in data.get("devices", []):
                if not isinstance(device, dict):
                    continue
                
                capabilities = []
                
                for cap in device.get("capabilities", []):
                    if not isinstance(cap, dict):
                        continue
                        
                    if cap.get("type") == "devices.capabilities.on_off":
                        state = cap.get("state", {})
                        if isinstance(state, dict):
                            capabilities.append({
                                "type": "on_off",
                                "state": state.get("value", False)
                            })
                
                if capabilities and device.get("id") and device.get("name"):
                    devices.append({
                        "id": device["id"],
                        "name": device["name"],
                        "type": device.get("type", "unknown"),
                        "capabilities": capabilities,
                    })
            
            logger.debug(f"–ù–∞–π–¥–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {devices}")
            return devices
            
        except requests.exceptions.RequestException as e:
            error_text = e.response.text if hasattr(e, 'response') else str(e)
            logger.error(f"–û—à–∏–±–∫–∞ API: {e}\nResponse: {error_text}")
            raise Exception(f"–û—à–∏–±–∫–∞ API: {str(e)}")
        except Exception as e:
            logger.exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            raise Exception(f"–û—à–∏–±–∫–∞: {str(e)}")

    def _generate_markup(self, devices):
        buttons = []
        
        for device in devices:
            for capability in device["capabilities"]:
                if capability["type"] == "on_off":
                    buttons.append([{
                        "text": f"üü¢ {device['name']} (–í–∫–ª)" if capability["state"] else f"üî¥ {device['name']} (–í—ã–∫–ª)",
                        "callback": self._toggle_device,
                        "args": (device["id"], not capability["state"])
                    }])
        
        return buttons

    async def _toggle_device(self, query, device_id, new_state):
        try:
            headers = {
                "Authorization": f"Bearer {self.config['token']}",
                "X-Request-Id": "telegram-hikka-module",
                "Content-Type": "application/json",
            }
            
            payload = {
                "devices": [{
                    "id": device_id,
                    "actions": [{
                        "type": "devices.capabilities.on_off",
                        "state": {
                            "instance": "on",
                            "value": new_state
                        }
                    }]
                }]
            }
            
            response = requests.post(
                "https://api.iot.yandex.net/v1.0/devices/actions",
                headers=headers,
                json=payload,
                timeout=10
            )
            response.raise_for_status()
            
            if self._message_id:
                devices = await self._get_devices()
                await query.edit(
                    text=self.strings("controlling"),
                    reply_markup=self._generate_markup(devices)
                )
            
            await query.answer(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {'–≤–∫–ª—é—á–µ–Ω–æ' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
            
        except requests.exceptions.RequestException as e:
            error_text = e.response.text if hasattr(e, 'response') else str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}\nResponse: {error_text}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {str(e)}")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")