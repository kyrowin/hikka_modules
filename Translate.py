# meta developer: @mainkyrowin

from deep_translator import GoogleTranslator
from telethon import events
from .. import loader, utils

__version__ = (1, 0, 0)

@loader.tds
class TranslateEnglishChatMod(loader.Module):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π. (–†–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É: –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -> –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –±—É–∫–≤—É -> –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å = –ø–µ—Ä–µ–≤–æ–¥–∏–º)"""

    strings = {
        "name": "TranslateEnglishChat",
        "enabled": (
            "‚úÖ <b>Module enabled. Translation will work in chat with ID: {}</b>"
        ),
        "disabled": (
            "‚õîÔ∏è <b>Module disabled. Translation is no longer active.</b>"
        ),
        "translated": (
            "üåê <b>Translation:</b>\n\n{}"
        ),
        "chat_set": (
            "üí¨ <b>Chat ID set to: {}</b>"
        ),
        "current_chat": (
            "‚ÑπÔ∏è <b>Currently monitoring chat ID: {}</b>"
        ),
        "no_chat": (
            "‚ö†Ô∏è <b>No chat ID configured! Use </b><code>.fcfg TranslateEnglishChat chat_id YOUR_CHAT_ID</code>"
        ),
        "no_id_provided": (
            "‚ùå <b>Please, send chat id. (int)</b>"
        )
    }

    strings_ru = {
        "enabled": (
            "‚úÖ <b>–ú–æ–¥—É–ª—å –≤–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —á–∞—Ç–µ —Å ID: {}</b>"
        ),
        "disabled": (
            "‚õîÔ∏è <b>–ú–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ–≤–æ–¥ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.</b>"
        ),
        "translated": (
            "üåê <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n\n{}"
        ),
        "chat_set": (
            "üí¨ <b>ID —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {}</b>"
        ),
        "current_chat": (
            "‚ÑπÔ∏è <b>–¢–µ–∫—É—â–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —á–∞—Ç: {}</b>"
        ),
        "no_chat": (
            "‚ö†Ô∏è <b>ID —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ </b><code>.fcfg TranslateEnglishChat chat_id ID_–ß–ê–¢–ê</code>"
        ),
        "no_id_provided": (
            "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ —á–∞—Ç–∞ (—á–∏—Å–ª–æ)</b>"
        )
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "chat_id",
            None,
            lambda: "Chat ID where translation will work",
        )
        self.enabled = False

    async def client_ready(self, client, db):
        self.client = client

    async def oncmd(self, message):
        """–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.config["chat_id"]:
            await utils.answer(message, self.strings("no_chat"))
            return
            
        self.enabled = True
        await utils.answer(
            message, 
            self.strings("enabled").format(self.config["chat_id"])
        )

    async def offcmd(self, message):
        """–í—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.enabled = False
        await utils.answer(message, self.strings("disabled"))

    async def chatcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–π–¥–∏ —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–¥—É–ª—å"""
        if not self.config["chat_id"]:
            await utils.answer(message, self.strings("no_chat"))
            return
            
        await utils.answer(
            message,
            self.strings("current_chat").format(self.config["chat_id"])
        )

    async def watcher(self, event):
        """–°–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
        if not self.enabled or not self.config["chat_id"]:
            return

        if event.chat_id != int(self.config["chat_id"]):
            return

        text_to_translate = event.raw_text

        if not text_to_translate:
            return

        if not any(char.isalpha() and ord(char) < 128 for char in text_to_translate):
            return

        try:
            translated = GoogleTranslator(source='auto', target='ru').translate(text_to_translate)
            await event.reply(
                self.strings("translated").format(translated)
            )
        except Exception as e:
            await utils.answer(
                event,
                f"<b>{self.strings('error')}:</b> {str(e)}"
            )
